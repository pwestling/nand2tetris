// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:

	ALU(x=outd, y=AorM, zx=instruction[11],  nx=instruction[10],  zy=instruction[9],  ny=instruction[8], f=instruction[7], no=instruction[6], out=outALUA, out=outALUD, out=outM,zr=zr,ng=ng);
	

	Mux16(a=instruction,b=outALUA, sel=instruction[15], out=outALUAorIn);
	
	Not(in=instruction[15],out=at);
	Or(a=at,b=instruction[5],out=loada);
	
	ARegister(in=outALUAorIn, load=loada, out=outa, out[0..14]=addressM);

	And(a=instruction[15],b=instruction[4],out=loadd);
	DRegister(in=outALUD, load=loadd, out=outd);


	Mux16(a=outa,b=inM,sel=instruction[12],out=AorM);

	PC(in=outa,inc=true,reset=reset,load=loadPC, out[0..14]=pc);

	Not(in=zr,out=notzero);
	Not(in=ng,out=pos);

	And(a=notzero, b=ng, out=lessthan0);
	And(a=notzero, b=pos, out=greaterthan0);
	And(a=instruction[2],b=lessthan0,out=loadj1);
	And(a=instruction[1], b=zr, out=loadj2);
	And(a=instruction[0], b=greaterthan0, out=loadj3);

	Or(a=loadj1, b=loadj2, out=loadj12);
	Or(a=loadj12, b=loadj3, out=load123);
	And(a=load123, b=instruction[15], out=loadPC);
	And(a=instruction[15], b=instruction[3], out=writeM);

}
