// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16-bit wide.  
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = RAM64[address(t)](t)
 *     Write: If load(t-1) then RAM64[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load == 1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load,sel=address[3..5],a=loada,b=loadb,c=loadc,d=loadd,e=loade,f=loadf,g=loadg,h=loadh);

    RAM8(in=in,address = address[0..2], load=loada,out=outa);
    RAM8(in=in,address =  address[0..2], load=loadb,out=outb);
    RAM8(in=in,address =  address[0..2], load=loadc,out=outc);
    RAM8(in=in,address =  address[0..2], load=loadd,out=outd);
    RAM8(in=in,address =  address[0..2], load=loade,out=oute);
    RAM8(in=in,address =  address[0..2], load=loadf,out=outf);
    RAM8(in=in,address =  address[0..2], load=loadg,out=outg);
    RAM8(in=in,address =  address[0..2], load=loadh,out=outh);

   Mux8Way16(a=outa,b=outb,c=outc,d=outd,e=oute,f=outf,g=outg,h=outh,sel=address[3..5],out=out);
}
